import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.preprocessing import MinMaxScaler
import matplotlib.pyplot as plt

# Function to read stock data
def read_stock_data(file_path):
    df = pd.read_csv(file_path, parse_dates=True, index_col='Date')
    return df

def clean_data(df):
    for col in df.columns:
        if df[col].dtype == 'object':
            df[col] = df[col].str.replace('"', '', regex=False).str.replace('$', '', regex=False)
    return df
            
def features_and_target(df):
    # Define features and target
    X = df[['Open', 'High', 'Low', 'Volume']].values
    y = df['Close/Last'].values
    
    # Normalization
    scaler_X = MinMaxScaler()
    scaler_y = MinMaxScaler()
    
    X_scaled = scaler_X.fit_transform(X)
    y_scaled = scaler_y.fit_transform(y.reshape(-1, 1)).flatten()
    
    # Split the data into training and testing sets
    X_train, X_test, y_train, y_test = train_test_split(X_scaled, y_scaled, test_size=0.2, random_state=42)

    # Initialize and train the Linear Regression model
    model = LinearRegression()
    model.fit(X_train, y_train)

    # Make predictions
    predictions = model.predict(X_test)

    # Return training/testing sets and predictions
    return X_train, X_test, y_train, y_test, predictions, scaler_y

def main():
    # Prompt the user to enter the path to their stock data CSV file
    file_path = input("Enter the path to your stock data CSV file: ")

    # Read the stock data from the provided CSV file
    df = read_stock_data(file_path)

    # Clean the DataFrame
    cleaned_df = clean_data(df)

    # Generate features, targets, and predictions
    X_train, X_test, y_train, y_test, predictions, scaler_y = features_and_target(cleaned_df)

    # Invert predictions from normalized back to actual values
    predictions_actual = scaler_y.inverse_transform(predictions.reshape(-1, 1)).flatten()
    y_test_actual = scaler_y.inverse_transform(y_test.reshape(-1, 1)).flatten()

    # Plotting
    plt.figure(figsize=(10, 6))
    plt.plot(y_test_actual, label='Actual Values')
    plt.plot(predictions_actual, label='Predicted Values')
    plt.title('Actual vs Predicted Stock Closing Prices')
    plt.xlabel('Time')
    plt.ylabel('Stock Closing Price')
    plt.legend()
    plt.show()

if __name__ == "__main__":
    main()
